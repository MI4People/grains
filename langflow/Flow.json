{
  "id": "9266b109-cf05-4b0a-91d6-dc15e5db847e",
  "data": {
    "nodes": [
      {
        "data": {
          "description": "Get chat inputs from the Playground.",
          "display_name": "Chat Input",
          "id": "ChatInput-J4eBJ",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.1.1",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        _background_color = self.background_color\n        _text_color = self.text_color\n        _icon = self.chat_icon\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\"background_color\": _background_color, \"text_color\": _text_color, \"icon\": _icon},\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Create a 1-minute animation script illustrating how the \"Managing Guest Amenities and Minibar Supplies\" will look if market is done incorrectly. The script should clearly demonstrate the common mistakes, their consequences. Use engaging visuals and concise narration to effectively convey the message."
              },
              "sender": {
                "advanced": true,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            }
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "height": 233,
        "id": "ChatInput-J4eBJ",
        "position": {
          "x": 573.7896682239198,
          "y": 794.0075201682218
        },
        "positionAbsolute": {
          "x": 573.7896682239198,
          "y": 794.0075201682218
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "id": "CustomComponent-Zkpkl",
        "type": "genericNode",
        "position": {
          "x": 1019.4757646439266,
          "y": 1212.4324914656888
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with Writer\"\n    description = \"A custom component to interact with the OpenAI Assistant 'writer'.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"critic_feedback\",\n            display_name=\"Critic Feedback\",\n            info=\"Feedback from the critic.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"student_feedback\",\n            display_name=\"Student Feedback\",\n            info=\"Feedback from the student.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Writer Response\", name=\"writer_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"writer\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'writer' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\n\\nPrevious Results:{writer_output}\\n\\nCritic Feedback: {critic_feedback}\\n\\nStudent Feedback: {student_feedback}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:  # 5 minutes timeout\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        critic_feedback = self.critic_feedback.strip()\n        student_feedback = self.student_feedback.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "critic_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "critic_feedback",
                "value": "",
                "display_name": "Critic Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the critic.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "student_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "student_feedback",
                "value": "",
                "display_name": "Student Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the student.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Assistant 'writer'.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Writer",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "writer_response",
                "display_name": "Writer Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "critic_feedback",
              "student_feedback",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-Zkpkl"
        },
        "selected": false,
        "width": 320,
        "height": 599,
        "dragging": false,
        "positionAbsolute": {
          "x": 1019.4757646439266,
          "y": 1212.4324914656888
        }
      },
      {
        "id": "CustomComponent-l19U3",
        "type": "genericNode",
        "position": {
          "x": 1559.4330491102887,
          "y": 1110.5355814411976
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with critic\"\n    description = \"A custom component to interact with the OpenAI Critic Assistant.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output to send to critic\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Critic Response\", name=\"critic_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"critic\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'critic' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\nWriter Output: {writer_output}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output to send to critic",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Critic Assistant.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Critic",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "critic_response",
                "display_name": "Critic Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-l19U3"
        },
        "selected": false,
        "width": 320,
        "height": 427,
        "dragging": false,
        "positionAbsolute": {
          "x": 1559.4330491102887,
          "y": 1110.5355814411976
        }
      },
      {
        "id": "CustomComponent-kI6Oh",
        "type": "genericNode",
        "position": {
          "x": 1548.660645449635,
          "y": 1659.893292043467
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with student\"\n    description = \"A custom component to interact with the OpenAI Student Assistant.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output to send to student\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Student Response\", name=\"student_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"student\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'student' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\nWriter Output: {writer_output}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output to send to student",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Student Assistant.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Student",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "student_response",
                "display_name": "Student Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-kI6Oh"
        },
        "selected": false,
        "width": 320,
        "height": 427,
        "positionAbsolute": {
          "x": 1548.660645449635,
          "y": 1659.893292043467
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-3XGJ1",
        "type": "genericNode",
        "position": {
          "x": 2770.0826512934295,
          "y": 869.4733662610012
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "background_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "background_color",
                "value": "",
                "display_name": "Background Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The background color of the icon.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "chat_icon": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_icon",
                "value": "",
                "display_name": "Icon",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The icon of the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, _id: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if _id:\n            source_dict[\"id\"] = _id\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    def message_response(self) -> Message:\n        _source, _icon, _display_name, _source_id = self.get_properties_from_source_component()\n        _background_color = self.background_color\n        _text_color = self.text_color\n        if self.chat_icon:\n            _icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(_source_id, _display_name, _source)\n        message.properties.icon = _icon\n        message.properties.background_color = _background_color\n        message.properties.text_color = _text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "combobox": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "trace_as_metadata": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "text_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_color",
                "value": "",
                "display_name": "Text Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text color of the name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "MessagesSquare",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "hidden": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "ChatOutput",
          "id": "ChatOutput-3XGJ1"
        },
        "selected": false,
        "width": 320,
        "height": 185,
        "positionAbsolute": {
          "x": 2770.0826512934295,
          "y": 869.4733662610012
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-jOMwv",
        "type": "genericNode",
        "position": {
          "x": 2123.2296636238357,
          "y": 1241.5646634424575
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with Writer\"\n    description = \"A custom component to interact with the OpenAI Assistant 'writer'.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"critic_feedback\",\n            display_name=\"Critic Feedback\",\n            info=\"Feedback from the critic.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"student_feedback\",\n            display_name=\"Student Feedback\",\n            info=\"Feedback from the student.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Writer Response\", name=\"writer_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"writer\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'writer' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\n\\nPrevious Results:{writer_output}\\n\\nCritic Feedback: {critic_feedback}\\n\\nStudent Feedback: {student_feedback}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:  # 5 minutes timeout\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        critic_feedback = self.critic_feedback.strip()\n        student_feedback = self.student_feedback.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "critic_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "critic_feedback",
                "value": "",
                "display_name": "Critic Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the critic.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "student_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "student_feedback",
                "value": "",
                "display_name": "Student Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the student.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Assistant 'writer'.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Writer",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "writer_response",
                "display_name": "Writer Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "critic_feedback",
              "student_feedback",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-jOMwv"
        },
        "selected": false,
        "width": 320,
        "height": 599,
        "positionAbsolute": {
          "x": 2123.2296636238357,
          "y": 1241.5646634424575
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-6fhsN",
        "type": "genericNode",
        "position": {
          "x": 1526.0320868488197,
          "y": 2364.3550570460693
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with critic\"\n    description = \"A custom component to interact with the OpenAI Critic Assistant.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output to send to critic\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Critic Response\", name=\"critic_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"critic\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'critic' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\nWriter Output: {writer_output}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output to send to critic",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Critic Assistant.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Critic",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "critic_response",
                "display_name": "Critic Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-6fhsN"
        },
        "selected": false,
        "width": 320,
        "height": 427,
        "positionAbsolute": {
          "x": 1526.0320868488197,
          "y": 2364.3550570460693
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-o1s4D",
        "type": "genericNode",
        "position": {
          "x": 1515.2596831881665,
          "y": 2913.7127676483383
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with student\"\n    description = \"A custom component to interact with the OpenAI Student Assistant.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output to send to student\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Student Response\", name=\"student_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"student\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'student' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\nWriter Output: {writer_output}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output to send to student",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Student Assistant.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Student",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "student_response",
                "display_name": "Student Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-o1s4D"
        },
        "selected": false,
        "width": 320,
        "height": 427,
        "positionAbsolute": {
          "x": 1515.2596831881665,
          "y": 2913.7127676483383
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-o0DeM",
        "type": "genericNode",
        "position": {
          "x": 2089.8287013623667,
          "y": 2495.384139047329
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with Writer\"\n    description = \"A custom component to interact with the OpenAI Assistant 'writer'.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"critic_feedback\",\n            display_name=\"Critic Feedback\",\n            info=\"Feedback from the critic.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"student_feedback\",\n            display_name=\"Student Feedback\",\n            info=\"Feedback from the student.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Writer Response\", name=\"writer_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"writer\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'writer' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\n\\nPrevious Results:{writer_output}\\n\\nCritic Feedback: {critic_feedback}\\n\\nStudent Feedback: {student_feedback}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:  # 5 minutes timeout\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        critic_feedback = self.critic_feedback.strip()\n        student_feedback = self.student_feedback.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "critic_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "critic_feedback",
                "value": "",
                "display_name": "Critic Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the critic.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "student_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "student_feedback",
                "value": "",
                "display_name": "Student Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the student.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Assistant 'writer'.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Writer",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "writer_response",
                "display_name": "Writer Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "critic_feedback",
              "student_feedback",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-o0DeM"
        },
        "selected": false,
        "width": 320,
        "height": 599,
        "positionAbsolute": {
          "x": 2089.8287013623667,
          "y": 2495.384139047329
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-wTbnq",
        "type": "genericNode",
        "position": {
          "x": 1495.9680908509745,
          "y": 3649.1920464567465
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with critic\"\n    description = \"A custom component to interact with the OpenAI Critic Assistant.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output to send to critic\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Critic Response\", name=\"critic_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"critic\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'critic' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\nWriter Output: {writer_output}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output to send to critic",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Critic Assistant.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Critic",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "critic_response",
                "display_name": "Critic Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-wTbnq"
        },
        "selected": true,
        "width": 320,
        "height": 427,
        "dragging": false,
        "positionAbsolute": {
          "x": 1495.9680908509745,
          "y": 3649.1920464567465
        }
      },
      {
        "id": "CustomComponent-1EmHw",
        "type": "genericNode",
        "position": {
          "x": 1485.1956871903203,
          "y": 4198.549757059016
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with student\"\n    description = \"A custom component to interact with the OpenAI Student Assistant.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output to send to student\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Student Response\", name=\"student_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"student\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'student' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\nWriter Output: {writer_output}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output to send to student",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Student Assistant.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Student",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "student_response",
                "display_name": "Student Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-1EmHw"
        },
        "selected": false,
        "width": 320,
        "height": 427,
        "dragging": false,
        "positionAbsolute": {
          "x": 1485.1956871903203,
          "y": 4198.549757059016
        }
      },
      {
        "id": "CustomComponent-3qEkH",
        "type": "genericNode",
        "position": {
          "x": 2059.7647053645214,
          "y": 3780.221128458007
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with Writer\"\n    description = \"A custom component to interact with the OpenAI Assistant 'writer'.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"critic_feedback\",\n            display_name=\"Critic Feedback\",\n            info=\"Feedback from the critic.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"student_feedback\",\n            display_name=\"Student Feedback\",\n            info=\"Feedback from the student.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Writer Response\", name=\"writer_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"writer\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'writer' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\n\\nPrevious Results:{writer_output}\\n\\nCritic Feedback: {critic_feedback}\\n\\nStudent Feedback: {student_feedback}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:  # 5 minutes timeout\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        critic_feedback = self.critic_feedback.strip()\n        student_feedback = self.student_feedback.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "critic_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "critic_feedback",
                "value": "",
                "display_name": "Critic Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the critic.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "student_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "student_feedback",
                "value": "",
                "display_name": "Student Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the student.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Assistant 'writer'.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Writer",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "writer_response",
                "display_name": "Writer Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "critic_feedback",
              "student_feedback",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-3qEkH"
        },
        "selected": false,
        "width": 320,
        "height": 599,
        "dragging": false,
        "positionAbsolute": {
          "x": 2059.7647053645214,
          "y": 3780.221128458007
        }
      },
      {
        "id": "CustomComponent-Sg1c5",
        "type": "genericNode",
        "position": {
          "x": 1479.533982285639,
          "y": 4973.416446811334
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with critic\"\n    description = \"A custom component to interact with the OpenAI Critic Assistant.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output to send to critic\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Critic Response\", name=\"critic_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"critic\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'critic' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\nWriter Output: {writer_output}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output to send to critic",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Critic Assistant.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Critic",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "critic_response",
                "display_name": "Critic Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-Sg1c5"
        },
        "selected": false,
        "width": 320,
        "height": 427,
        "positionAbsolute": {
          "x": 1479.533982285639,
          "y": 4973.416446811334
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-zaBOf",
        "type": "genericNode",
        "position": {
          "x": 1468.7615786249848,
          "y": 5522.7741574136035
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with student\"\n    description = \"A custom component to interact with the OpenAI Student Assistant.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output to send to student\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Student Response\", name=\"student_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"student\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'student' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\nWriter Output: {writer_output}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output to send to student",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Student Assistant.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Student",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "student_response",
                "display_name": "Student Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-zaBOf"
        },
        "selected": false,
        "width": 320,
        "height": 427,
        "positionAbsolute": {
          "x": 1468.7615786249848,
          "y": 5522.7741574136035
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-WYcRW",
        "type": "genericNode",
        "position": {
          "x": 2043.330596799186,
          "y": 5104.445528812594
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with Writer\"\n    description = \"A custom component to interact with the OpenAI Assistant 'writer'.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"critic_feedback\",\n            display_name=\"Critic Feedback\",\n            info=\"Feedback from the critic.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"student_feedback\",\n            display_name=\"Student Feedback\",\n            info=\"Feedback from the student.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Writer Response\", name=\"writer_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"writer\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'writer' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\n\\nPrevious Results:{writer_output}\\n\\nCritic Feedback: {critic_feedback}\\n\\nStudent Feedback: {student_feedback}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:  # 5 minutes timeout\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        critic_feedback = self.critic_feedback.strip()\n        student_feedback = self.student_feedback.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "critic_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "critic_feedback",
                "value": "",
                "display_name": "Critic Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the critic.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "student_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "student_feedback",
                "value": "",
                "display_name": "Student Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the student.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Assistant 'writer'.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Writer",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "writer_response",
                "display_name": "Writer Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "critic_feedback",
              "student_feedback",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-WYcRW"
        },
        "selected": false,
        "width": 320,
        "height": 599,
        "positionAbsolute": {
          "x": 2043.330596799186,
          "y": 5104.445528812594
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-aV3Dn",
        "type": "genericNode",
        "position": {
          "x": 1480.1099976548194,
          "y": 6363.269798718962
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with critic\"\n    description = \"A custom component to interact with the OpenAI Critic Assistant.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output to send to critic\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Critic Response\", name=\"critic_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"critic\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'critic' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\nWriter Output: {writer_output}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output to send to critic",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Critic Assistant.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Critic",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "critic_response",
                "display_name": "Critic Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-aV3Dn"
        },
        "selected": false,
        "width": 320,
        "height": 427,
        "positionAbsolute": {
          "x": 1480.1099976548194,
          "y": 6363.269798718962
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-LqqgF",
        "type": "genericNode",
        "position": {
          "x": 1469.3375939941652,
          "y": 6912.62750932123
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with student\"\n    description = \"A custom component to interact with the OpenAI Student Assistant.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output to send to student\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Student Response\", name=\"student_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"student\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'student' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\nWriter Output: {writer_output}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output to send to student",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Student Assistant.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Student",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "student_response",
                "display_name": "Student Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-LqqgF"
        },
        "selected": false,
        "width": 320,
        "height": 427,
        "positionAbsolute": {
          "x": 1469.3375939941652,
          "y": 6912.62750932123
        },
        "dragging": false
      },
      {
        "id": "CustomComponent-clcv5",
        "type": "genericNode",
        "position": {
          "x": 2043.9066121683663,
          "y": 6494.298880720222
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "api_key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": true,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "OpenAI_API_Key",
                "display_name": "API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Your OpenAI API key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import MessageTextInput, Output\nfrom langflow.schema import Data, Message\nimport requests\nimport time\n\nclass OpenAIChatComponent(Component):\n    display_name = \"Chat with Writer\"\n    description = \"A custom component to interact with the OpenAI Assistant 'writer'.\"\n    documentation: str = \"http://docs.langflow.org/components/custom\"\n    icon = \"chat\"\n    name = \"OpenAIChatComponent\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"task\",\n            display_name=\"Task\",\n            info=\"The task to send to the assistant.\",\n            value=\"Hello, Assistant!\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"writer_output\",\n            display_name=\"Writer Output\",\n            info=\"Writer output\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"critic_feedback\",\n            display_name=\"Critic Feedback\",\n            info=\"Feedback from the critic.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"student_feedback\",\n            display_name=\"Student Feedback\",\n            info=\"Feedback from the student.\",\n            value=\"\",\n            tool_mode=True,\n        ),\n        MessageTextInput(\n            name=\"api_key\",\n            display_name=\"API Key\",\n            info=\"Your OpenAI API key.\",\n            value=\"\",\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Writer Response\", name=\"writer_response\", method=\"build_output\"),\n    ]\n\n    def get_assistant_id(self, api_key):\n        BASE_URL = \"https://api.openai.com/v1/assistants\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        assistants = []\n        url = f\"{BASE_URL}?order=desc&limit=20\"\n        while url:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                assistants.extend(data.get(\"data\", []))\n                url = data.get(\"next\", None)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error fetching assistant ID: {str(e)}\")\n        for assistant in assistants:\n            if assistant.get(\"name\") == \"writer\":\n                return assistant.get(\"id\")\n        raise RuntimeError(\"Assistant named 'writer' not found.\")\n\n    def create_thread(self, api_key):\n        url = f\"https://api.openai.com/v1/threads\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {}\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error creating thread: {str(e)}\")\n\n    def add_message(self, api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        combined_message = f\"Task: {user_message}\\n\\nPrevious Results:{writer_output}\\n\\nCritic Feedback: {critic_feedback}\\n\\nStudent Feedback: {student_feedback}\"\n        payload = {\n            \"role\": \"user\",\n            \"content\": [\n                {\n                    \"type\": \"text\",\n                    \"text\": combined_message\n                }\n            ]\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error adding message to thread: {str(e)}\")\n\n    def run_thread(self, api_key, thread_id, assistant_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        payload = {\n            \"assistant_id\": assistant_id,\n            \"response_format\": {\n                \"type\": \"json_object\"\n            }\n        }\n        try:\n            response = requests.post(url, headers=headers, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"id\")\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error running thread: {str(e)}\")\n\n    def wait_for_completion(self, api_key, thread_id, run_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        start_time = time.time()\n        while True:\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                data = response.json()\n                status = data.get(\"status\")\n                if status == \"completed\":\n                    messages = self.list_messages(api_key, thread_id)\n                    responses = []\n                    for msg in messages:\n                        if msg['role'] == 'assistant':\n                            responses.append(msg['content'][0]['text']['value'])\n                    return responses\n                elif time.time() - start_time > 300:  # 5 minutes timeout\n                    return data\n                time.sleep(1)\n            except requests.exceptions.RequestException as e:\n                raise RuntimeError(f\"Error checking run status: {str(e)}\")\n\n    def list_messages(self, api_key, thread_id):\n        url = f\"https://api.openai.com/v1/threads/{thread_id}/messages\"\n        headers = {\n            \"Authorization\": f\"Bearer {api_key.strip()}\",\n            \"Content-Type\": \"application/json\",\n            \"OpenAI-Beta\": \"assistants=v2\"\n        }\n        try:\n            response = requests.get(url, headers=headers)\n            response.raise_for_status()\n            data = response.json()\n            return data.get(\"data\", [])\n        except requests.exceptions.RequestException as e:\n            raise RuntimeError(f\"Error listing messages: {str(e)}\")\n\n    def build_output(self) -> Message:\n        user_message = self.task.strip()\n        writer_output = self.writer_output.strip()\n        critic_feedback = self.critic_feedback.strip()\n        student_feedback = self.student_feedback.strip()\n        api_key = self.api_key.strip()\n\n        if not user_message:\n            raise ValueError(\"User input cannot be empty.\")\n        if not api_key:\n            raise ValueError(\"API key is required.\")\n\n        assistant_id = self.get_assistant_id(api_key)\n        thread_id = self.create_thread(api_key)\n        self.add_message(api_key, thread_id, user_message, writer_output, critic_feedback, student_feedback)\n        run_id = self.run_thread(api_key, thread_id, assistant_id)\n        responses = self.wait_for_completion(api_key, thread_id, run_id)\n\n        result_string = data_to_text(\"{text}\", responses, sep=\"\\n\")\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "critic_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "critic_feedback",
                "value": "",
                "display_name": "Critic Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the critic.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "student_feedback": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "student_feedback",
                "value": "",
                "display_name": "Student Feedback",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Feedback from the student.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "task": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "task",
                "value": "",
                "display_name": "Task",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The task to send to the assistant.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "writer_output": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "writer_output",
                "value": "",
                "display_name": "Writer Output",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Writer output",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "A custom component to interact with the OpenAI Assistant 'writer'.",
            "icon": "chat",
            "base_classes": [
              "Message"
            ],
            "display_name": "Writer",
            "documentation": "http://docs.langflow.org/components/custom",
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "writer_response",
                "display_name": "Writer Response",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true
              }
            ],
            "field_order": [
              "task",
              "writer_output",
              "critic_feedback",
              "student_feedback",
              "api_key"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.1"
          },
          "type": "CustomComponent",
          "id": "CustomComponent-clcv5"
        },
        "selected": false,
        "width": 320,
        "height": 599,
        "positionAbsolute": {
          "x": 2043.9066121683663,
          "y": 6494.298880720222
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-l19U3",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-l19U3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-l19U3",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-l19U3{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-l19U3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-Zkpkl",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-Zkpklœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-Zkpkl",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-Zkpkl{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-Zkpklœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-Zkpkl",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Zkpklœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-l19U3",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-l19U3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-l19U3",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-Zkpkl",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-Zkpkl{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Zkpklœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-l19U3{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-l19U3œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-kI6Oh",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-kI6Ohœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-kI6Oh",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-kI6Oh{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-kI6Ohœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running",
        "selected": false
      },
      {
        "source": "CustomComponent-Zkpkl",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Zkpklœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-kI6Oh",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-kI6Ohœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-kI6Oh",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-Zkpkl",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-Zkpkl{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Zkpklœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-kI6Oh{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-kI6Ohœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-Zkpkl",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Zkpklœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-jOMwv",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-jOMwvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-jOMwv",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-Zkpkl",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-Zkpkl{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Zkpklœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-jOMwv{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-jOMwvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-l19U3",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-l19U3œ,œnameœ:œcritic_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-jOMwv",
        "targetHandle": "{œfieldNameœ:œcritic_feedbackœ,œidœ:œCustomComponent-jOMwvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "critic_feedback",
            "id": "CustomComponent-jOMwv",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-l19U3",
            "name": "critic_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-l19U3{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-l19U3œ,œnameœ:œcritic_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-jOMwv{œfieldNameœ:œcritic_feedbackœ,œidœ:œCustomComponent-jOMwvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-kI6Oh",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-kI6Ohœ,œnameœ:œstudent_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-jOMwv",
        "targetHandle": "{œfieldNameœ:œstudent_feedbackœ,œidœ:œCustomComponent-jOMwvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "student_feedback",
            "id": "CustomComponent-jOMwv",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-kI6Oh",
            "name": "student_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-kI6Oh{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-kI6Ohœ,œnameœ:œstudent_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-jOMwv{œfieldNameœ:œstudent_feedbackœ,œidœ:œCustomComponent-jOMwvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-jOMwv",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-jOMwvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-jOMwv",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-jOMwv{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-jOMwvœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-jOMwv",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-jOMwvœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-6fhsN",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-6fhsNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-6fhsN",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-jOMwv",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-jOMwv{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-jOMwvœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-6fhsN{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-6fhsNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-jOMwv",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-jOMwvœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-o1s4D",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-o1s4Dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-o1s4D",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-jOMwv",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-jOMwv{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-jOMwvœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-o1s4D{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-o1s4Dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-6fhsN",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-6fhsNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-6fhsN",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-6fhsN{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-6fhsNœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-o1s4D",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-o1s4Dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-o1s4D",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-o1s4D{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-o1s4Dœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-wTbnq",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-wTbnqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-wTbnq",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-wTbnq{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-wTbnqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-1EmHw",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-1EmHwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-1EmHw",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-1EmHw{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-1EmHwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-Sg1c5",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-Sg1c5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-Sg1c5",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-Sg1c5{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-Sg1c5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-zaBOf",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-zaBOfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-zaBOf",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-zaBOf{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-zaBOfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-aV3Dn",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-aV3Dnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-aV3Dn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-aV3Dn{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-aV3Dnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-LqqgF",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-LqqgFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-LqqgF",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-LqqgF{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-LqqgFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-6fhsN",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-6fhsNœ,œnameœ:œcritic_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-o0DeM",
        "targetHandle": "{œfieldNameœ:œcritic_feedbackœ,œidœ:œCustomComponent-o0DeMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "critic_feedback",
            "id": "CustomComponent-o0DeM",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-6fhsN",
            "name": "critic_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-6fhsN{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-6fhsNœ,œnameœ:œcritic_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-o0DeM{œfieldNameœ:œcritic_feedbackœ,œidœ:œCustomComponent-o0DeMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-o1s4D",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-o1s4Dœ,œnameœ:œstudent_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-o0DeM",
        "targetHandle": "{œfieldNameœ:œstudent_feedbackœ,œidœ:œCustomComponent-o0DeMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "student_feedback",
            "id": "CustomComponent-o0DeM",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-o1s4D",
            "name": "student_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-o1s4D{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-o1s4Dœ,œnameœ:œstudent_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-o0DeM{œfieldNameœ:œstudent_feedbackœ,œidœ:œCustomComponent-o0DeMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-jOMwv",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-jOMwvœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-o0DeM",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-o0DeMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-o0DeM",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-jOMwv",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-jOMwv{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-jOMwvœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-o0DeM{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-o0DeMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-o0DeM",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-o0DeMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-o0DeM",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-o0DeM{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-o0DeMœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-3qEkH",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-3qEkHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-3qEkH",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-3qEkH{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-3qEkHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "ran"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-WYcRW",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-WYcRWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-WYcRW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-WYcRW{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-WYcRWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "ChatInput-J4eBJ",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-clcv5",
        "targetHandle": "{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-clcv5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "task",
            "id": "CustomComponent-clcv5",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-J4eBJ",
            "name": "message",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-ChatInput-J4eBJ{œdataTypeœ:œChatInputœ,œidœ:œChatInput-J4eBJœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-clcv5{œfieldNameœ:œtaskœ,œidœ:œCustomComponent-clcv5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-o0DeM",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-o0DeMœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-wTbnq",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-wTbnqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-wTbnq",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-o0DeM",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-o0DeM{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-o0DeMœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-wTbnq{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-wTbnqœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-o0DeM",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-o0DeMœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-1EmHw",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-1EmHwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-1EmHw",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-o0DeM",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-o0DeM{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-o0DeMœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-1EmHw{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-1EmHwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-o0DeM",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-o0DeMœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-3qEkH",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-3qEkHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-3qEkH",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-o0DeM",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-o0DeM{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-o0DeMœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-3qEkH{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-3qEkHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "ran"
      },
      {
        "source": "CustomComponent-wTbnq",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-wTbnqœ,œnameœ:œcritic_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-3qEkH",
        "targetHandle": "{œfieldNameœ:œcritic_feedbackœ,œidœ:œCustomComponent-3qEkHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "critic_feedback",
            "id": "CustomComponent-3qEkH",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-wTbnq",
            "name": "critic_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-wTbnq{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-wTbnqœ,œnameœ:œcritic_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-3qEkH{œfieldNameœ:œcritic_feedbackœ,œidœ:œCustomComponent-3qEkHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "ran"
      },
      {
        "source": "CustomComponent-1EmHw",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-1EmHwœ,œnameœ:œstudent_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-3qEkH",
        "targetHandle": "{œfieldNameœ:œstudent_feedbackœ,œidœ:œCustomComponent-3qEkHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "student_feedback",
            "id": "CustomComponent-3qEkH",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-1EmHw",
            "name": "student_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-1EmHw{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-1EmHwœ,œnameœ:œstudent_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-3qEkH{œfieldNameœ:œstudent_feedbackœ,œidœ:œCustomComponent-3qEkHœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "ran"
      },
      {
        "source": "CustomComponent-3qEkH",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3qEkHœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-WYcRW",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-WYcRWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-WYcRW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-3qEkH",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-3qEkH{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3qEkHœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-WYcRW{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-WYcRWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": true,
        "className": "running"
      },
      {
        "source": "CustomComponent-3qEkH",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3qEkHœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-Sg1c5",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-Sg1c5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-Sg1c5",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-3qEkH",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-3qEkH{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3qEkHœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-Sg1c5{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-Sg1c5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": true,
        "className": "running"
      },
      {
        "source": "CustomComponent-3qEkH",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3qEkHœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-zaBOf",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-zaBOfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-zaBOf",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-3qEkH",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-3qEkH{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-3qEkHœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-zaBOf{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-zaBOfœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": true,
        "className": "running"
      },
      {
        "source": "CustomComponent-Sg1c5",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Sg1c5œ,œnameœ:œcritic_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-WYcRW",
        "targetHandle": "{œfieldNameœ:œcritic_feedbackœ,œidœ:œCustomComponent-WYcRWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "critic_feedback",
            "id": "CustomComponent-WYcRW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-Sg1c5",
            "name": "critic_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-Sg1c5{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-Sg1c5œ,œnameœ:œcritic_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-WYcRW{œfieldNameœ:œcritic_feedbackœ,œidœ:œCustomComponent-WYcRWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-zaBOf",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-zaBOfœ,œnameœ:œstudent_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-WYcRW",
        "targetHandle": "{œfieldNameœ:œstudent_feedbackœ,œidœ:œCustomComponent-WYcRWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "student_feedback",
            "id": "CustomComponent-WYcRW",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-zaBOf",
            "name": "student_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-zaBOf{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-zaBOfœ,œnameœ:œstudent_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-WYcRW{œfieldNameœ:œstudent_feedbackœ,œidœ:œCustomComponent-WYcRWœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-WYcRW",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-WYcRWœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-clcv5",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-clcv5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-clcv5",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-WYcRW",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-WYcRW{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-WYcRWœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-clcv5{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-clcv5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-WYcRW",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-WYcRWœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-aV3Dn",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-aV3Dnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-aV3Dn",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-WYcRW",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-WYcRW{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-WYcRWœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-aV3Dn{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-aV3Dnœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-WYcRW",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-WYcRWœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-LqqgF",
        "targetHandle": "{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-LqqgFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "writer_output",
            "id": "CustomComponent-LqqgF",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-WYcRW",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-WYcRW{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-WYcRWœ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-LqqgF{œfieldNameœ:œwriter_outputœ,œidœ:œCustomComponent-LqqgFœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-aV3Dn",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-aV3Dnœ,œnameœ:œcritic_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-clcv5",
        "targetHandle": "{œfieldNameœ:œcritic_feedbackœ,œidœ:œCustomComponent-clcv5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "critic_feedback",
            "id": "CustomComponent-clcv5",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-aV3Dn",
            "name": "critic_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-aV3Dn{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-aV3Dnœ,œnameœ:œcritic_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-clcv5{œfieldNameœ:œcritic_feedbackœ,œidœ:œCustomComponent-clcv5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-LqqgF",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-LqqgFœ,œnameœ:œstudent_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-clcv5",
        "targetHandle": "{œfieldNameœ:œstudent_feedbackœ,œidœ:œCustomComponent-clcv5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "student_feedback",
            "id": "CustomComponent-clcv5",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-LqqgF",
            "name": "student_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-LqqgF{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-LqqgFœ,œnameœ:œstudent_responseœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-clcv5{œfieldNameœ:œstudent_feedbackœ,œidœ:œCustomComponent-clcv5œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      },
      {
        "source": "CustomComponent-clcv5",
        "sourceHandle": "{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-clcv5œ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-3XGJ1",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-3XGJ1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-3XGJ1",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "CustomComponent",
            "id": "CustomComponent-clcv5",
            "name": "writer_response",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "reactflow__edge-CustomComponent-clcv5{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-clcv5œ,œnameœ:œwriter_responseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-3XGJ1{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-3XGJ1œ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "animated": false,
        "className": "not-running"
      }
    ],
    "viewport": {
      "x": -731.4651682719596,
      "y": -3014.695181729381,
      "zoom": 0.8213107007520664
    }
  },
  "description": "",
  "name": "Flow",
  "last_tested_version": "1.1.1",
  "endpoint_name": null,
  "is_component": false
}